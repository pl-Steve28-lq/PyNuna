from utils import *

class Nuna:
  def __init__(self, error=True):
    self.error = error
    self.stack = []

  def tokenize(self, code):
    com = 'ëˆˆëˆ„ë‚˜ì£¼ê±°!ðŸ’•â™¥'
    res = []
    prev = ''
    cnt = idx = column = lineno = 0
    for i in code+'!':
      if i in com:
        if prev: res.append([prev, cnt+(not cnt)])
        prev = i; cnt = 0
      elif i == '.': cnt += 1
      elif i == '\n': lineno += 1; column = 0
      elif self.error:
        raise Exception(f'Invalid character "{i}" found. '
        '(Line {lineno+1} Column {column+1}, Char {idx})')
      idx += 1; column += 1
    return res
  
  def execute(self, code):
    self.stack = []
    result = ''
    tok = self.tokenize(code)
    for i in tok:
      com, cnt = i
      if com in 'ëˆˆëˆ„': self.stack.append(cnt)
      if com == 'ë‚˜': self.push(self.getLast()*cnt)
      if com == 'ì£¼': self.push(self.getLast()-cnt)
      if com == 'ê±°': self.push(self.getLast()+cnt)
      # Warning : Unofficial Command (â™¥)
      if com in 'ðŸ’•â™¥': 
        p = self.stack.pop()
        q = self.stack.pop()
        self.stack.append(q+(2*(com == 'ðŸ’•')-1)*p)
      # Warning : Unofficial Command (â™¥)
      if com == '!':
        for i in self.stack:
          result += chr(i)
    stdout(result)
    return self.stack
  
  def getLast(self):
    if self.stack:
      return self.stack.pop()
    raise Exception('Operate with empty stack')
  
  def push(self, item):
    self.stack.append(item)

code = '''ëˆˆë‚˜..ë‚˜..ì£¼...ë‚˜..........ê±°ë‚˜..........ê±°....ë‚˜..........ê±°ë‚˜..........ê±°ë‚˜....ëˆ„........ë‚˜.........â™¥
ëˆ„ë‚˜..ë‚˜..ë‚˜..ê±°ë‚˜..ë‚˜.....ë‚˜.....ê±°...ë‚˜..ë‚˜.....ê±°ë‚˜..ë‚˜.....ì£¼..ëˆˆë‚˜..........ë‚˜..........â™¥!'''
n = Nuna()
print(n.execute(code))